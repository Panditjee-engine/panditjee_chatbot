import random
from datetime import datetime
from collections import Counter
import matplotlib.pyplot as plt

# Helper function to reduce a number to a single digit (or Master Numbers)
def reduce_to_single_digit(number):
    while number > 9 and number not in {11, 22, 33}:  # Master Numbers
        number = sum(int(digit) for digit in str(number))
    return number

# Numerology Calculations
def calculate_life_path_number(birth_date):
    digits = [int(d) for d in birth_date if d.isdigit()]
    total = sum(digits)
    return reduce_to_single_digit(total)

def calculate_expression_number(full_name):
    letter_values = {chr(i + 96): i for i in range(1, 27)}  # Map a-z to 1-26
    total = sum(letter_values[char.lower()] for char in full_name if char.isalpha())
    return reduce_to_single_digit(total)

def calculate_soul_urge_number(full_name):
    vowels = "aeiou"
    letter_values = {chr(i + 96): i for i in range(1, 27)}  # Map a-z to 1-26
    total = sum(letter_values[char.lower()] for char in full_name if char.lower() in vowels)
    return reduce_to_single_digit(total)

# Lo Shu Grid Calculation
def create_lo_shu_grid(birth_date):
    digits = [int(d) for d in birth_date if d.isdigit()]
    digit_counts = Counter(digits)
    lo_shu_grid = {num: digit_counts.get(num, 0) for num in range(1, 10)}
    return lo_shu_grid

def lo_shu_grid_report(lo_shu_grid):
    """Generate a detailed Lo Shu Grid report based on strengths and weaknesses."""
    report = []
    descriptions = {
        1: "Leadership, determination, and self-confidence.",
        2: "Relationships, sensitivity, and adaptability.",
        3: "Communication, creativity, and optimism.",
        4: "Practicality, organization, and discipline.",
        5: "Freedom, adventure, and adaptability.",
        6: "Responsibility, nurturing, and harmony.",
        7: "Spirituality, introspection, and wisdom.",
        8: "Wealth, power, and material success.",
        9: "Ambition, humanitarianism, and compassion."
    }
    
    for num, count in lo_shu_grid.items():
        if count == 0:
            report.append(f"Missing {num}: Challenges in {descriptions[num]} â€” Focus on developing these traits.")
        elif count == 1:
            report.append(f"Balanced {num}: Good alignment with {descriptions[num]} â€” Utilize this effectively.")
        else:
            report.append(f"Enhanced {num}: Strong traits in {descriptions[num]} ({count} times) â€” Avoid overusing these.")
    
    return "\n".join(report)

# Magical Predictions Logic
def lucky_numbers(core_number):
    random.seed(core_number)
    return random.sample(range(1, 50), 3)

def daily_insight(life_path_number):
    today = datetime.now()
    day_number = reduce_to_single_digit(today.day + today.month + today.year)
    combined_number = reduce_to_single_digit(life_path_number + day_number)
    
    insights = {
        1: "Today is perfect for taking initiative. Start something new!",
        2: "Focus on partnerships and collaboration. Harmony is key.",
        3: "Express your creativity today. Share your ideas with confidence.",
        4: "Work on organizing your tasks. Structure will bring success.",
        5: "Embrace adventure and change. Be flexible and open-minded.",
        6: "Nurture relationships and focus on self-care today.",
        7: "Reflect on your goals. A quiet moment will bring clarity.",
        8: "Push forward with ambition. Financial decisions may be fruitful.",
        9: "Show compassion and help someone in need. It will bring joy.",
    }
    
    return insights.get(combined_number, "Trust the universe to guide you today.")

# Visual Representation of Lo Shu Grid
def plot_lo_shu_grid(lo_shu_grid):
    fig, ax = plt.subplots(figsize=(6, 6))
    ax.set_xlim(0, 3)
    ax.set_ylim(0, 3)
    
    for x in range(1, 3):
        ax.axvline(x, color="black", linewidth=1)
        ax.axhline(x, color="black", linewidth=1)
    
    positions = [(2, 0), (2, 1), (2, 2), (1, 0), (1, 1), (1, 2), (0, 0), (0, 1), (0, 2)]
    for i, (x, y) in enumerate(positions, start=1):
        count = lo_shu_grid[i]
        ax.text(y + 0.5, x + 0.5, f"{i} ({count})", ha="center", va="center", fontsize=12, color="blue")
    
    ax.set_xticks([])
    ax.set_yticks([])
    plt.title("Lo Shu Grid", fontsize=16)
    plt.show()

# Main Program
if __name__ == "__main__":
    print("ðŸ”® Welcome to Magical Numerology + Lo Shu Grid Predictions ðŸ”®")
    
    # Input birth date
    birth_date = input("Enter your date of birth (DD-MM-YYYY): ")
    life_path_number = calculate_life_path_number(birth_date)
    
    # Input full name
    full_name = input("Enter your full name: ")
    expression_number = calculate_expression_number(full_name)
    soul_urge_number = calculate_soul_urge_number(full_name)
    
    # Lo Shu Grid Calculation
    lo_shu_grid = create_lo_shu_grid(birth_date)
    grid_report = lo_shu_grid_report(lo_shu_grid)
    
    # Generate Predictions
    print("\nðŸŒŸ Your Magical Numerology Predictions ðŸŒŸ")
    print(f"Life Path Number: {life_path_number}")
    print(f"Expression Number: {expression_number}")
    print(f"Soul Urge Number: {soul_urge_number}")
    print("\nðŸ”¢ Lucky Numbers: ", lucky_numbers(life_path_number))
    print("ðŸŒž Daily Insight: ", daily_insight(life_path_number))
    
    # Lo Shu Grid Report
    print("\nðŸ”® Lo Shu Grid Analysis ðŸ”®")
    print(grid_report)
    
    # Visualize Lo Shu Grid
    plot_lo_shu_grid(lo_shu_grid)
